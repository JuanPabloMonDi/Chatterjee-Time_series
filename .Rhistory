x4<-rnorm(2,2,10)
error<-rnorm(2)
for (i in 3:size){
error2<-rnorm(1,0,0.2)
nuevox<-2*cos(x4[i-1])+0.5*sin(x4[i-2])+0.4*error[i-1]+0.8*1/(1+exp(error[i-2]))+error2
error<-append(error,error2)
x4<-append(x4,nuevox)
}
#5. Simulamos un SETAR
TvarMat <- c(2.9,-0.4,-0.1,-1.5, 0.2,0.3)
x5<-setar.sim(n=size,B=TvarMat,lag=2, type="simul", nthresh=1, Thresh=2, starting=c(2.8,2.2))
series<-data.frame(x1=x1,x2=x2,x3=x3,x4=x4,x5=x5)
for (serie in colnames(series)){
x<-series[[serie]]
for (lag in 1:lag.max){
data<-data.frame()
#Construction of the matrix with lag columns
for (i in 0:(length(x)-lag-1)){
xt<-x[(length(x)-i)]
xt1<-t(data.frame(rev(x[(length(x)-(lag)-i):(length(x)-(i+1))])))
data<-rbind(data,cbind(xt,xt1))
}
#Modify the data frame created
row.names(data)<-0:(nrow(data)-1)
VarReg<-paste0("x",1:(lag))
colnames(data)<-c("xt",VarReg)
#calculate each kind of correlation of the matrix
corPearson<-pcor(data,method="pearson")
corSpearman<-pcor(data,method="spearman")
corKendall<-pcor(data,method="kendall")
corXi<-partcor(data,method = "xi")
#Since we are only interested in the correlation with xt, we only consider the first row
corPearson<-corPearson$estimate[1,]
corSpearman<-corSpearman$estimate[1,]
corKendall<-corKendall$estimate[1,]
corXi<-corXi[1,]
print(paste("rezago ",lag,"/",lag.max ," de la serie",serie, "en la simulacion ",sim,"/",n_sim))
}
#Confidence intervals
#For Pearson the variance is 1/N
Plags<-data.frame(lag=(index(corPearson)-1),value=corPearson)
#plot(corPearson[2:lag],type="h")
#abline(h=qnorm(0.975)*sqrt(1/size))
#abline(h=-qnorm(0.975)*sqrt(1/size))
Plags<-Plags[abs(Plags$value)>qnorm(0.975)*sqrt(1/size),]
Plags<-Plags$lag
npp<-length(Plags)
pp<-rbind(pp,data.frame(size=size,sim=sim, serie=serie,p1=ifelse(npp>=1, Plags[[length(Plags)]], 0),p2=ifelse(npp>=2, Plags[(length(Plags)-1)], 0),p3=ifelse(npp>=3, Plags[(length(Plags)-2)], 0)))
#For Spearman the variance is 1/(N-1)
#plot(corSpearman,type="h")
#abline(h=-qnorm(0.975)*sqrt(1/(size-1)))
#abline(h=qnorm(0.975)*sqrt(1/(size-1)))
SPlags<-data.frame(lag=(index(corSpearman)-1),value=corSpearman)
SPlags<-SPlags[abs(SPlags$value)>qnorm(0.975)*sqrt(1/(size-1)),]
SPlags<-SPlags$lag
nsp<-length(SPlags)
psp<-rbind(psp,data.frame(size=size,sim=sim, serie=serie,p1=ifelse(nsp>=1, SPlags[[length(SPlags)]], 0),p2=ifelse(nsp>=2, SPlags[(length(SPlags)-1)], 0),p3=ifelse(nsp>=3, SPlags[(length(SPlags)-2)], 0)))
#For Kendall the variance is 2(2n+5)/9n(n-1)
#plot(corKendall[2:lag],type="h")
#abline(h=qnorm(0.975)*sqrt(2*(2*size+5)/(9*size*(size-1))))
#abline(h=-qnorm(0.975)*sqrt(2*(2*size+5)/(9*size*(size-1))))
Klags<-data.frame(lag=(index(corKendall)-1),value=corKendall)
Klags<-Klags[abs(Klags$value)>(qnorm(0.975)*sqrt(2*(2*size+5)/(9*size*(size-1)))),]
Klags<-Klags$lag
nk<-length(Klags)
pk<-rbind(pk,data.frame(size=size,sim=sim, serie=serie,p1=ifelse(nk>=1, Klags[[length(Klags)]], 0),p2=ifelse(nk>=2, Klags[[(length(Klags)-1)]], 0),p3=ifelse(nk>=3, Klags[[(length(Klags)-2)]], 0)))
#For Xi the variance is 2/5N
#plot(corXi[2:lag],type="h")
#abline(h=qnorm(0.975)*sqrt(2/(5*size)),col="red",lw=1)
#abline(h=-qnorm(0.975)*sqrt(2/(5*size)),col="red",lw=1)
#Get the 3 maximum autocorrelations
Xilags<-data.frame(lag=(index(corXi)-1),value=corXi)
Xilags<-Xilags[abs(Xilags$value)>(qnorm(0.975)*sqrt(2/(5*size))),]
Xilags<-Xilags$lag#[(nrow(Xilags)-2):nrow(Xilags)]
nxi=length(Xilags)
pxi<-rbind(pxi,data.frame(size=size,sim=sim, serie=serie,p1=ifelse(nxi>=1, Xilags[[length(Xilags)]], 0),p2=ifelse(nxi>=2, Xilags[[(length(Xilags)-1)]], 0),p3=ifelse(nxi>=3, Xilags[[(length(Xilags)-2)]], 0)))
#codecM<-append(codecM,codec(data[,1],data[,ncol(data)],data[,2:(ncol(data)-1)]))
#Now, with the coefficient of Azadka-Chatterjee
codecM<-foci(data$xt,data[2:(lag+1)],numCores = 1)
codecM<-codecM$selectedVar$index
ncodec=length(codecM)
pcodec<-rbind(pcodec,data.frame(size=size,sim=sim, serie=serie,p1=ifelse(ncodec>=1, codecM[[length(codecM)]], 0),p2=ifelse(ncodec>=2, codecM[[(length(codecM)-1)]], 0),p3=ifelse(ncodec>=3, codecM[[(length(codecM)-2)]], 0)))
} #End series iterations
} #End simulations
}#End sizes
View(pcodec)
a<-c(1,6,8,7,6)
sort(a, TRUE)[1]
sort(a, TRUE)[2]
sort(a, TRUE)[3]
sort(a, TRUE)[4]
#Fixed terms
n_sim=3
lag.max=10
pp=NULL
psp=NULL
pk=NULL
pxi=NULL
pcodec<-NULL
for (size in c(100,200)){
#Simulations
for (sim in 1:n_sim){
print(sim)
#Now, we are goint to simulate the time series
#1. Serie AR(3) con función seno
x1<-rnorm(3,0,20)
for (i in 4:size){
x1<-append(x1,3*sin(x1[i-1])+2*sin(x1[i-2])+sin(x1[i-3])+rnorm(1))
}
#2. AR(4) con funciones sin(x)
x2<-rnorm(4,0,1)
for (i in 4:size){
x2<-append(x2,3*sin(x2[i-1])+2*sin(x2[i-2]/3)+0.5*sin(x2[i-3]/2)-3*1/(1+exp(x2[i-4]))+rnorm(1))
}
#3.ARIMA(2,1,1)
x3<-arima.sim(list(2,1,1),n=size)
#4. ARMA FUNCIONAL (2,2)
x4<-rnorm(2,2,10)
error<-rnorm(2)
for (i in 3:size){
error2<-rnorm(1,0,0.2)
nuevox<-2*cos(x4[i-1])+0.5*sin(x4[i-2])+0.4*error[i-1]+0.8*1/(1+exp(error[i-2]))+error2
error<-append(error,error2)
x4<-append(x4,nuevox)
}
#5. Simulamos un SETAR
TvarMat <- c(2.9,-0.4,-0.1,-1.5, 0.2,0.3)
x5<-setar.sim(n=size,B=TvarMat,lag=2, type="simul", nthresh=1, Thresh=2, starting=c(2.8,2.2))
series<-data.frame(x1=x1,x2=x2,x3=x3,x4=x4,x5=x5)
for (serie in colnames(series)){
x<-series[[serie]]
for (lag in 1:lag.max){
data<-data.frame()
#Construction of the matrix with lag columns
for (i in 0:(length(x)-lag-1)){
xt<-x[(length(x)-i)]
xt1<-t(data.frame(rev(x[(length(x)-(lag)-i):(length(x)-(i+1))])))
data<-rbind(data,cbind(xt,xt1))
}
#Modify the data frame created
row.names(data)<-0:(nrow(data)-1)
VarReg<-paste0("x",1:(lag))
colnames(data)<-c("xt",VarReg)
#calculate each kind of correlation of the matrix
corPearson<-pcor(data,method="pearson")
corSpearman<-pcor(data,method="spearman")
corKendall<-pcor(data,method="kendall")
corXi<-partcor(data,method = "xi")
#Since we are only interested in the correlation with xt, we only consider the first row
corPearson<-corPearson$estimate[1,]
corSpearman<-corSpearman$estimate[1,]
corKendall<-corKendall$estimate[1,]
corXi<-corXi[1,]
print(paste("rezago ",lag,"/",lag.max ," de la serie",serie, "en la simulacion ",sim,"/",n_sim))
}
#Confidence intervals
#For Pearson the variance is 1/N
Plags<-data.frame(lag=(index(corPearson)-1),value=corPearson)
#plot(corPearson[2:lag],type="h")
#abline(h=qnorm(0.975)*sqrt(1/size))
#abline(h=-qnorm(0.975)*sqrt(1/size))
Plags<-Plags[abs(Plags$value)>qnorm(0.975)*sqrt(1/size),]
Plags<-Plags$lag
npp<-length(Plags)
pp<-rbind(pp,data.frame(size=size,sim=sim, serie=serie,p1=ifelse(npp>=1, Plags[[length(Plags)]], 0),p2=ifelse(npp>=2, Plags[(length(Plags)-1)], 0),p3=ifelse(npp>=3, Plags[(length(Plags)-2)], 0)))
#For Spearman the variance is 1/(N-1)
#plot(corSpearman,type="h")
#abline(h=-qnorm(0.975)*sqrt(1/(size-1)))
#abline(h=qnorm(0.975)*sqrt(1/(size-1)))
SPlags<-data.frame(lag=(index(corSpearman)-1),value=corSpearman)
SPlags<-SPlags[abs(SPlags$value)>qnorm(0.975)*sqrt(1/(size-1)),]
SPlags<-SPlags$lag
nsp<-length(SPlags)
psp<-rbind(psp,data.frame(size=size,sim=sim, serie=serie,p1=ifelse(nsp>=1, SPlags[[length(SPlags)]], 0),p2=ifelse(nsp>=2, SPlags[(length(SPlags)-1)], 0),p3=ifelse(nsp>=3, SPlags[(length(SPlags)-2)], 0)))
#For Kendall the variance is 2(2n+5)/9n(n-1)
#plot(corKendall[2:lag],type="h")
#abline(h=qnorm(0.975)*sqrt(2*(2*size+5)/(9*size*(size-1))))
#abline(h=-qnorm(0.975)*sqrt(2*(2*size+5)/(9*size*(size-1))))
Klags<-data.frame(lag=(index(corKendall)-1),value=corKendall)
Klags<-Klags[abs(Klags$value)>(qnorm(0.975)*sqrt(2*(2*size+5)/(9*size*(size-1)))),]
Klags<-Klags$lag
nk<-length(Klags)
pk<-rbind(pk,data.frame(size=size,sim=sim, serie=serie,p1=ifelse(nk>=1, Klags[[length(Klags)]], 0),p2=ifelse(nk>=2, Klags[[(length(Klags)-1)]], 0),p3=ifelse(nk>=3, Klags[[(length(Klags)-2)]], 0)))
#For Xi the variance is 2/5N
#plot(corXi[2:lag],type="h")
#abline(h=qnorm(0.975)*sqrt(2/(5*size)),col="red",lw=1)
#abline(h=-qnorm(0.975)*sqrt(2/(5*size)),col="red",lw=1)
#Get the 3 maximum autocorrelations
Xilags<-data.frame(lag=(index(corXi)-1),value=corXi)
Xilags<-Xilags[abs(Xilags$value)>(qnorm(0.975)*sqrt(2/(5*size))),]
Xilags<-Xilags$lag#[(nrow(Xilags)-2):nrow(Xilags)]
nxi=length(Xilags)
pxi<-rbind(pxi,data.frame(size=size,sim=sim, serie=serie,p1=ifelse(nxi>=1, Xilags[[length(Xilags)]], 0),p2=ifelse(nxi>=2, Xilags[[(length(Xilags)-1)]], 0),p3=ifelse(nxi>=3, Xilags[[(length(Xilags)-2)]], 0)))
#codecM<-append(codecM,codec(data[,1],data[,ncol(data)],data[,2:(ncol(data)-1)]))
#Now, with the coefficient of Azadka-Chatterjee
codecM<-foci(data$xt,data[2:(lag+1)],numCores = 1)
codecM<-codecM$selectedVar$index
ncodec=length(codecM)
pcodec<-rbind(pcodec,data.frame(size=size,sim=sim, serie=serie,p1=ifelse(ncodec>=1, max(codecM), 0),p2=ifelse(ncodec>=2, sort(codecM, TRUE)[2], 0),p3=ifelse(ncodec>=3,sort(codecM, TRUE)[3], 0)))
} #End series iterations
} #End simulations
}#End sizes
View(pcodec)
#Since we are only interested in the correlation with xt, we only consider the first row
corPearson<-corPearson$estimate[1,]
corPearson
lag
length(corPearson)
corPearson[lag+1]
#Fixed terms
n_sim=3
lag.max=10
pp=NULL
psp=NULL
pk=NULL
pxi=NULL
pcodec<-NULL
for (size in c(100,200)){
#Simulations
for (sim in 1:n_sim){
print(sim)
#Now, we are goint to simulate the time series
#1. Serie AR(3) con función seno
x1<-rnorm(3,0,20)
for (i in 4:size){
x1<-append(x1,3*sin(x1[i-1])+2*sin(x1[i-2])+sin(x1[i-3])+rnorm(1))
}
#2. AR(4) con funciones sin(x)
x2<-rnorm(4,0,1)
for (i in 4:size){
x2<-append(x2,3*sin(x2[i-1])+2*sin(x2[i-2]/3)+0.5*sin(x2[i-3]/2)-3*1/(1+exp(x2[i-4]))+rnorm(1))
}
#3.ARIMA(2,1,1)
x3<-arima.sim(list(2,1,1),n=size)
#4. ARMA FUNCIONAL (2,2)
x4<-rnorm(2,2,10)
error<-rnorm(2)
for (i in 3:size){
error2<-rnorm(1,0,0.2)
nuevox<-2*cos(x4[i-1])+0.5*sin(x4[i-2])+0.4*error[i-1]+0.8*1/(1+exp(error[i-2]))+error2
error<-append(error,error2)
x4<-append(x4,nuevox)
}
#5. Simulamos un SETAR
TvarMat <- c(2.9,-0.4,-0.1,-1.5, 0.2,0.3)
x5<-setar.sim(n=size,B=TvarMat,lag=2, type="simul", nthresh=1, Thresh=2, starting=c(2.8,2.2))
series<-data.frame(x1=x1,x2=x2,x3=x3,x4=x4,x5=x5)
for (serie in colnames(series)){
x<-series[[serie]]
corPearson<-c()
corSpearman<-c()
corKendall<-c()
corXi<-c()
for (lag in 1:lag.max){
data<-data.frame()
#Construction of the matrix with lag columns
for (i in 0:(length(x)-lag-1)){
xt<-x[(length(x)-i)]
xt1<-t(data.frame(rev(x[(length(x)-(lag)-i):(length(x)-(i+1))])))
data<-rbind(data,cbind(xt,xt1))
}
#Modify the data frame created
row.names(data)<-0:(nrow(data)-1)
VarReg<-paste0("x",1:(lag))
colnames(data)<-c("xt",VarReg)
#calculate each kind of correlation of the matrix
corP<-pcor(data,method="pearson")
corSp<-pcor(data,method="spearman")
corK<-pcor(data,method="kendall")
corX<-partcor(data,method = "xi")
#Since we are only interested in the correlation with xt, we only consider the first row
corP<-corP$estimate[1,]
corSp<-corSp$estimate[1,]
corK<-corK$estimate[1,]
corX<-corX[1,]
corPearson<-append(corPearson, corP[lag+1])
corSpearman<-append(corSpearman,corSp[lag+1])
corKendall<-append(corKendall,corK[lag+1])
corXi<-append(corXi,corX[lag+1])
print(paste("rezago ",lag,"/",lag.max ," de la serie",serie, "en la simulacion ",sim,"/",n_sim))
}
#Confidence intervals
#For Pearson the variance is 1/N
Plags<-data.frame(lag=(index(corPearson)-1),value=corPearson)
#plot(corPearson[2:lag],type="h")
#abline(h=qnorm(0.975)*sqrt(1/size))
#abline(h=-qnorm(0.975)*sqrt(1/size))
Plags<-Plags[abs(Plags$value)>qnorm(0.975)*sqrt(1/size),]
Plags<-Plags$lag
npp<-length(Plags)
pp<-rbind(pp,data.frame(size=size,sim=sim, serie=serie,p1=ifelse(npp>=1, Plags[[length(Plags)]], 0),p2=ifelse(npp>=2, Plags[(length(Plags)-1)], 0),p3=ifelse(npp>=3, Plags[(length(Plags)-2)], 0)))
#For Spearman the variance is 1/(N-1)
#plot(corSpearman,type="h")
#abline(h=-qnorm(0.975)*sqrt(1/(size-1)))
#abline(h=qnorm(0.975)*sqrt(1/(size-1)))
SPlags<-data.frame(lag=(index(corSpearman)-1),value=corSpearman)
SPlags<-SPlags[abs(SPlags$value)>qnorm(0.975)*sqrt(1/(size-1)),]
SPlags<-SPlags$lag
nsp<-length(SPlags)
psp<-rbind(psp,data.frame(size=size,sim=sim, serie=serie,p1=ifelse(nsp>=1, SPlags[[length(SPlags)]], 0),p2=ifelse(nsp>=2, SPlags[(length(SPlags)-1)], 0),p3=ifelse(nsp>=3, SPlags[(length(SPlags)-2)], 0)))
#For Kendall the variance is 2(2n+5)/9n(n-1)
#plot(corKendall[2:lag],type="h")
#abline(h=qnorm(0.975)*sqrt(2*(2*size+5)/(9*size*(size-1))))
#abline(h=-qnorm(0.975)*sqrt(2*(2*size+5)/(9*size*(size-1))))
Klags<-data.frame(lag=(index(corKendall)-1),value=corKendall)
Klags<-Klags[abs(Klags$value)>(qnorm(0.975)*sqrt(2*(2*size+5)/(9*size*(size-1)))),]
Klags<-Klags$lag
nk<-length(Klags)
pk<-rbind(pk,data.frame(size=size,sim=sim, serie=serie,p1=ifelse(nk>=1, Klags[[length(Klags)]], 0),p2=ifelse(nk>=2, Klags[[(length(Klags)-1)]], 0),p3=ifelse(nk>=3, Klags[[(length(Klags)-2)]], 0)))
#For Xi the variance is 2/5N
#plot(corXi[2:lag],type="h")
#abline(h=qnorm(0.975)*sqrt(2/(5*size)),col="red",lw=1)
#abline(h=-qnorm(0.975)*sqrt(2/(5*size)),col="red",lw=1)
#Get the 3 maximum autocorrelations
Xilags<-data.frame(lag=(index(corXi)-1),value=corXi)
Xilags<-Xilags[abs(Xilags$value)>(qnorm(0.975)*sqrt(2/(5*size))),]
Xilags<-Xilags$lag#[(nrow(Xilags)-2):nrow(Xilags)]
nxi=length(Xilags)
pxi<-rbind(pxi,data.frame(size=size,sim=sim, serie=serie,p1=ifelse(nxi>=1, Xilags[[length(Xilags)]], 0),p2=ifelse(nxi>=2, Xilags[[(length(Xilags)-1)]], 0),p3=ifelse(nxi>=3, Xilags[[(length(Xilags)-2)]], 0)))
#codecM<-append(codecM,codec(data[,1],data[,ncol(data)],data[,2:(ncol(data)-1)]))
#Now, with the coefficient of Azadka-Chatterjee
codecM<-foci(data$xt,data[2:(lag+1)],numCores = 1)
codecM<-codecM$selectedVar$index
ncodec=length(codecM)
pcodec<-rbind(pcodec,data.frame(size=size,sim=sim, serie=serie,p1=ifelse(ncodec>=1, max(codecM), 0),p2=ifelse(ncodec>=2, sort(codecM, TRUE)[2], 0),p3=ifelse(ncodec>=3,sort(codecM, TRUE)[3], 0)))
} #End series iterations
} #End simulations
}#End sizes
View(pcodec)
View(pxi)
load("~/Universidad/2024-1/Trabajo de Grado/Trabajo de Grado 2024-1S Juan Pablo Montaño-20240306T200844Z-001/Trabajo de Grado 2024-1S Juan Pablo Montaño/AlgoTuil2.RData")
library(ppcor)
library(mgcv)
library(gplm)
library(FOCI) #Codec
library(dplyr)
library(tidyr)
library(XICOR)
library(forecast)
library(minerva)
library(tsDyn)
### set seed for replicability -------------------
set.seed(131101)
#p <-
ggplot(pcodec[pcodec$serie=="x5",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.075)
library(ggplot2)
#p <-
ggplot(pcodec[pcodec$serie=="x5",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.075)
#p <-
ggplot(pcodec[pcodec$serie=="x5",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = T)+geom_boxplot(width=0.075)
#p <-
ggplot(pcodec[pcodec$serie=="x5",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.05)
#p <-
ggplot(pcodec[pcodec$serie=="x1",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.05)
#p <-
ggplot(pcodec[pcodec$serie=="x1",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.05)+ stat_summary(fun.y=3, geom="point", size=2, color="red")
#p <-
ggplot(pcodec[pcodec$serie=="x1",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.05)+ stat_summary(3, geom="point", size=2, color="red")
#p <-
ggplot(pcodec[pcodec$serie=="x1",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.05)+ stat_summary(fun.y=median, geom="point", size=2, color="red")
lagsReales<-function(serie){
if (serie=="x1"){lag=3}
if (serie=="x2"){lag=4}
if (serie=="x3"){lag=2}
if (serie=="x4"){lag=2}
if (serie=="x5"){lag=2}
return(lag)
}
#p <-
ggplot(pcodec[pcodec$serie=="x1",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.05)+ stat_summary(fun.y=lagsReales, geom="point", size=2, color="red")
lagsReales("x1")
lagsReales("x2")
#p <-
ggplot(pcodec[pcodec$serie=="x1",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.05)+ stat_summary(fun.y=3, geom="point", size=2, color="red")
#p <-
ggplot(pcodec[pcodec$serie=="x1",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.05)+ geom_point(aes(x=factor(size),y=3))
#p <-
ggplot(pcodec[pcodec$serie=="x1",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.05)+ geom_point(aes(x=factor(size),y=3),colour="red")
ggplot(pp[pp$serie=="x5",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.075)
ggplot(pp[pp$serie=="x5",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.075)+ geom_point(aes(x=factor(size),y=2),colour="red")
#p <-
ggplot(pcodec[pcodec$serie=="x5",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.05)+ geom_point(aes(x=factor(size),y=2),colour="red")
ggplot(pp[pp$serie=="x5",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.075)+ geom_point(aes(x=factor(size),y=2),colour="red")
ggplot(psp[psp$serie=="x5",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.075)+ geom_point(aes(x=factor(size),y=2),colour="red")
ggplot(pk[pk$serie=="x5",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.05)+ geom_point(aes(x=factor(size),y=3),colour="red")
ggplot(pk[pk$serie=="x5",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.05)+ geom_point(aes(x=factor(size),y=2),colour="red")
ggplot(pxi[pxi$serie=="x5",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.05)+ geom_point(aes(x=factor(size),y=2),colour="red")
#p <-
ggplot(pcodec[pcodec$serie=="x3",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.05)+ geom_point(aes(x=factor(size),y=2),colour="red")
ggplot(pp[pp$serie=="x3",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.075)+ geom_point(aes(x=factor(size),y=2),colour="red")
#p <-
ggplot(pcodec[pcodec$serie=="x4",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.05)+ geom_point(aes(x=factor(size),y=2),colour="red")
ggplot(pp[pp$serie=="x4",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.075)+ geom_point(aes(x=factor(size),y=2),colour="red")
ggplot(psp[psp$serie=="x4",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.075)+ geom_point(aes(x=factor(size),y=2),colour="red")
ggplot(pk[pk$serie=="x4",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.05)+ geom_point(aes(x=factor(size),y=2),colour="red")
ggplot(pxi[pxi$serie=="x4",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.05)+ geom_point(aes(x=factor(size),y=2),colour="red")
#p <-
ggplot(pcodec[pcodec$serie=="x4",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.05)+ geom_point(aes(x=factor(size),y=2),colour="red")
#p <-
ggplot(pcodec[pcodec$serie=="x2",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.05)+ geom_point(aes(x=factor(size),y=4),colour="red")
ggplot(pp[pp$serie=="x2",], aes(x=factor(size), y=p1,fill=factor(size))) +
geom_violin(trim = F)+geom_boxplot(width=0.075)+ geom_point(aes(x=factor(size),y=4),colour="red")
load("~/GitHub/Chatterjee-Time_series/28Julio20241000.RData")
ggplot(pp_long[pp_long$serie=="x1",], aes(x=factor(size), y=Value,fill = factor(size))) +
geom_violin(trim = F)+
geom_boxplot(width=0.3)+ geom_hline(yintercept = 5,colour="blue",lwd=1.25)+
xlab("Size")+facet_wrap(~Estimator,scales = "free_y")+theme_bw()+theme(legend.position = "none")
library(ppcor)
library(mgcv)
library(gplm)
library(FOCI) #Codec
library(dplyr)
library(tidyr)
library(ggplot2)
library(XICOR)
library(forecast)
library(minerva)
library(tsDyn)
setwd("~/GitHub/Chatterjee-Time_series")
source("Functions.R")
### set seed for replicability -------------------
set.seed(131101)
ggplot(pp_long[pp_long$serie=="x1",], aes(x=factor(size), y=Value,fill = factor(size))) +
geom_violin(trim = F)+
geom_boxplot(width=0.3)+ geom_hline(yintercept = 5,colour="blue",lwd=1.25)+
xlab("Size")+facet_wrap(~Estimator,scales = "free_y")+theme_bw()+theme(legend.position = "none")
pp_long <- tidyr::pivot_longer(pp, cols = c(p1,p2,p3), names_to = "Estimator", values_to = "Value")
psp_long <- tidyr::pivot_longer(psp, cols = c(p1,p2,p3), names_to = "Estimator", values_to = "Value")
pk_long <- tidyr::pivot_longer(pk, cols = c(p1,p2,p3), names_to = "Estimator", values_to = "Value")
pxi_long <- tidyr::pivot_longer(pxi, cols = c(p1,p2,p3), names_to = "Estimator", values_to = "Value")
pcodec_long <- tidyr::pivot_longer(pcodec, cols = c(p1,p2,p3), names_to = "Estimator", values_to = "Value")
ggplot(pp_long[pp_long$serie=="x1",], aes(x=factor(size), y=Value,fill = factor(size))) +
geom_violin(trim = F)+
geom_boxplot(width=0.3)+ geom_hline(yintercept = 5,colour="blue",lwd=1.25)+
xlab("Size")+facet_wrap(~Estimator,scales = "free_y")+theme_bw()+theme(legend.position = "none")
ggplot(psp_long[psp_long$serie=="x1",], aes(x=factor(size), y=Value,fill = factor(size))) +
#geom_violin(trim = F)+
geom_boxplot(width=0.5)+ geom_hline(yintercept = 5,colour="blue",lwd=1.25)+
xlab("Size")+facet_wrap(~Estimator,scales = "free_y")+theme_bw()+theme(legend.position = "none")
ggplot(pk_long[pk_long$serie=="x1",], aes(x=factor(size), y=Value,fill = factor(size))) +
#geom_violin(trim = F)+
geom_boxplot(width=0.5)+ geom_hline(yintercept = 5,colour="blue",lwd=1.25)+
xlab("Size")+facet_wrap(~Estimator,scales = "free_y")+theme_bw()+theme(legend.position = "none")
ggplot(pp_long[pp_long$serie=="x2",], aes(x=factor(size), y=Value,fill = factor(size))) +
#geom_violin(trim = F)+
geom_boxplot(width=0.5)+
geom_hline(yintercept = 1,colour="blue",lwd=1.25)+
xlab("Size")+
facet_wrap(~Estimator,scales = "free_y")+
theme_bw()+theme(legend.position = "none")
ggplot(psp_long[psp_long$serie=="x2",], aes(x=factor(size), y=Value,fill = factor(size))) +
#geom_violin(trim = F)+
geom_boxplot(width=0.5)+
geom_hline(yintercept = 1,colour="blue",lwd=1.25)+
xlab("Size")+
facet_wrap(~Estimator,scales = "free_y")+
theme_bw()+theme(legend.position = "none")
ggplot(pk_long[pk_long$serie=="x2",], aes(x=factor(size), y=Value,fill = factor(size))) +
#geom_violin(trim = F)+
geom_boxplot(width=0.5)+ geom_hline(yintercept = 1,colour="blue",lwd=1.25)+
xlab("Size")+facet_wrap(~Estimator,scales = "free_y")+theme_bw()+theme(legend.position = "none")
#### ---------------------- Serie 3 --------------------------
ggplot(pp_long[pp_long$serie=="x3",], aes(x=factor(size), y=Value,fill = factor(size))) +
geom_violin(trim = F)+
geom_boxplot(width=0.5)+ geom_hline(yintercept = 2,colour="blue",lwd=1.25)+
xlab("Size")+facet_wrap(~Estimator,scales = "free_y")+theme_bw()+theme(legend.position = "none")
ggplot(psp_long[psp_long$serie=="x3",], aes(x=factor(size), y=Value,fill = factor(size))) +
geom_violin(trim = F)+
geom_boxplot(width=0.5)+ geom_hline(yintercept = 2,colour="blue",lwd=1.25)+
xlab("Size")+facet_wrap(~Estimator,scales = "free_y")+theme_bw()+theme(legend.position = "none")
ggplot(pk_long[pk_long$serie=="x3",], aes(x=factor(size), y=Value,fill = factor(size))) +
#geom_violin(trim = F)+
geom_boxplot(width=0.5)+ geom_hline(yintercept = 2,colour="blue",lwd=1.25)+
xlab("Size")+facet_wrap(~Estimator,scales = "free_y")+theme_bw()+theme(legend.position = "none")
#### ---------------------- Serie 3 --------------------------
ggplot(pp_long[pp_long$serie=="x3",], aes(x=factor(size), y=Value,fill = factor(size))) +
geom_violin(trim = F)+
geom_boxplot(width=0.5)+ geom_hline(yintercept = 2,colour="blue",lwd=1.25)+
xlab("Size")+facet_wrap(~Estimator,scales = "free_y")+theme_bw()+theme(legend.position = "none")
ggplot(pp_long[pp_long$serie=="x1",], aes(x=factor(size), y=Value,fill = factor(size))) +
geom_violin(trim = F)+
geom_boxplot(width=0.3)+ geom_hline(yintercept = 5,colour="blue",lwd=1.25)+
xlab("Size")+facet_wrap(~Estimator,scales = "free_y")+theme_bw()+theme(legend.position = "none")
